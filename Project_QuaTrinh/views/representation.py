import streamlit as st
import pandas as pd
from controllers.data_representation import DataRepresentation

def representation_view():
    # üéØ **Giao di·ªán ch√≠nh**
    tab1, tab2 = st.tabs(["Bi·ªÉu di·ªÖn", "H∆∞·ªõng d·∫´n "])
    with tab1:
      st.title("üî¢ C√¥ng c·ª• Bi·ªÉu Di·ªÖn VƒÉn B·∫£n")
      st.write("C√¥ng c·ª• n√†y gi√∫p b·∫°n chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh d·∫°ng vector s·ª≠ d·ª•ng One-hot Encoding ho·∫∑c CountVectorizer.")

      # üìÇ **Ch·ªçn lo·∫°i input**
      input_type = st.radio("Ch·ªçn ngu·ªìn d·ªØ li·ªáu:", ("Nh·∫≠p vƒÉn b·∫£n", "T·∫£i file vƒÉn b·∫£n (.txt)"))

      # üìù **Nh·∫≠p vƒÉn b·∫£n ho·∫∑c t·∫£i file**
      text_data = []
      if input_type == "Nh·∫≠p vƒÉn b·∫£n":
          input_text = st.text_area("Nh·∫≠p vƒÉn b·∫£n c·ªßa b·∫°n (m·ªói d√≤ng l√† m·ªôt m·∫´u d·ªØ li·ªáu):", height=200)
          text_data = input_text.split("\n") if input_text else []

      elif input_type == "T·∫£i file vƒÉn b·∫£n (.txt)":
          uploaded_file = st.file_uploader("üìÇ Ch·ªçn file .txt", type="txt")
          if uploaded_file:
              text_data = uploaded_file.read().decode("utf-8").split("\n")

      # üìå **Ch·ªçn ph∆∞∆°ng ph√°p**
      method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p bi·ªÉu di·ªÖn:", ("One-hot Encoding",
                                                        "CountVectorizer",
                                                          "Bag of N-grams (n=1,2)",
                                                            "TF-IDF Vectorizer",
                                                              "Word2Vec Embedding",
                                                                "GloVe Embedding",
                                                                  "FastText Embedding",
                                                                    "ChatGPT Embedding",
                                                                      "BERT Embedding",
                                                                        "RoBERTa Embedding"))

      # ‚úÖ **N√∫t x·ª≠ l√Ω**
      if st.button("üöÄ Bi·ªÉu di·ªÖn vƒÉn b·∫£n"):
          if text_data:
              vectorizer = DataRepresentation(method="count" if method == "CountVectorizer"
                                                      else "onehot" if method == "One-hot Encoding"
                                                      else "bagofngram" if method == "Bag of N-grams (n=1,2)"
                                                      else "tfidf" if method == "TF-IDF Vectorizer"
                                                      else "word2vec" if method == "Word2Vec Embedding"
                                                      else "glove" if method == "GloVe Embedding"
                                                      else "fasttext" if method == "FastText Embedding"
                                                      else "chatgpt" if method == "ChatGPT Embedding"
                                                      else "bert" if method == "BERT Embedding"
                                                      else "roberta" if method == "RoBERTa Embedding"
                                                      else "count")
              result = vectorizer.fit_transform(text_data)
              if not isinstance(result, pd.DataFrame):
                  result = pd.DataFrame(result)
              
              if isinstance(result, pd.DataFrame):
                  st.subheader("üìä K·∫øt qu·∫£ Bi·ªÉu Di·ªÖn D·ªØ Li·ªáu")
                  st.dataframe(result)
                  
                  # üíæ **N√∫t t·∫£i k·∫øt qu·∫£**
                  csv_data = result.to_csv(index=False).encode("utf-8")
                  st.download_button("üíæ T·∫£i k·∫øt qu·∫£ CSV", data=csv_data, file_name="vectorized_data.csv", mime="text/csv")
              else:
                  st.warning(result)
          else:
              st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p d·ªØ li·ªáu!")
    with tab2:
        st.markdown(
            """
            ### üìå H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng 
            - **Nh·∫≠p vƒÉn b·∫£n**: B·∫°n c√≥ th·ªÉ nh·∫≠p vƒÉn b·∫£n tr·ª±c ti·∫øp v√†o √¥ vƒÉn b·∫£n ho·∫∑c t·∫£i file vƒÉn b·∫£n. M·ªói d√≤ng l√† m·ªôt m·∫´u d·ªØ li·ªáu.
            - **Ch·ªçn ph∆∞∆°ng ph√°p**: Ch·ªçn ph∆∞∆°ng ph√°p bi·ªÉu di·ªÖn d·ªØ li·ªáu t·ª´ danh s√°ch.
            - **Bi·ªÉu di·ªÖn vƒÉn b·∫£n**: Nh·∫•n n√∫t ƒë·ªÉ th·ª±c hi·ªán bi·ªÉu di·ªÖn d·ªØ li·ªáu.
            - **K·∫øt qu·∫£**: K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü b√™n d∆∞·ªõi.
            - **T·∫£i xu·ªëng**: B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng k·∫øt qu·∫£ bi·ªÉu di·ªÖn d·ªØ li·ªáu b·∫±ng c√°ch nh·∫•n n√∫t "T·∫£i xu·ªëng".
            ---
            """
          )
        st.video("https://youtu.be/A4ZkI5JYRDA")
        st.caption("üé• H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bi·ªÉu di·ªÖn d·ªØ li·ªáu")
